akkaBug.grpc.interface = "127.0.0.1"
akka.remote.artery.canonical.hostname = "127.0.0.1"
akka.management.http.hostname = "127.0.0.1"

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  stdout-loglevel: "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    debug {
      receive = true
      autoreceive = true
    }
    provider = "cluster"
  }

  remote.artery {
    canonical.port = 2551
  }

  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    shutdown-after-unsuccessful-join-seed-nodes = 60s

    sharding {
      least-shard-allocation-strategy.rebalance-absolute-limit = 20
    }
  }

  management {
    http {
      port = 8558
      port = ${?HTTP_MGMT_PORT}
      base-path = "akkaBug"
    }
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
      }
    }
  }
}

akka.management.cluster.bootstrap.contact-point-discovery {
  service-name = "akkaBug"
  discovery-method = config
  # boostrap filters ports with the same IP assuming they are previous instances running on the same node
  # unless a port is specified
  port-name = "management"
  required-contact-point-nr = 1
  # config service discovery never changes
  stable-margin = 1 ms
  # bootstrap without all the nodes being up
  contact-with-all-contact-points = false
}

akka.discovery.config.services {
  "akkaBug" {
    endpoints = [
      {host = "127.0.0.1", port = 8558}
      # {host = "127.0.0.1", port = 9102}
      # {host = "127.0.0.1", port = 9103}
    ]
  }
}

cluster {
  seed-nodes = [
    "akka://akkaPoc@127.0.0.1:25251",
    "akka://akkaPoc@127.0.0.1:25252"
  ]
  downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
}

